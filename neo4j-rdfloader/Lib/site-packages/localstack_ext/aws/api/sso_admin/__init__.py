import sys
from datetime import datetime
from typing import List, Optional

if sys.version_info >= (3, 8):
    from typing import TypedDict
else:
    from typing_extensions import TypedDict

from localstack.aws.api import RequestContext, ServiceException, ServiceRequest, handler

AccessControlAttributeKey = str
AccessControlAttributeValueSource = str
AccessDeniedExceptionMessage = str
AccountId = str
ConflictExceptionMessage = str
Duration = str
Id = str
InstanceAccessControlAttributeConfigurationStatusReason = str
InstanceArn = str
InternalFailureMessage = str
ManagedPolicyArn = str
ManagedPolicyName = str
ManagedPolicyPath = str
MaxResults = int
Name = str
PermissionSetArn = str
PermissionSetDescription = str
PermissionSetName = str
PermissionSetPolicyDocument = str
PrincipalId = str
Reason = str
RelayState = str
ResourceNotFoundMessage = str
ServiceQuotaExceededMessage = str
TagKey = str
TagValue = str
TaggableResourceArn = str
TargetId = str
ThrottlingExceptionMessage = str
Token = str
UUId = str
ValidationExceptionMessage = str


class InstanceAccessControlAttributeConfigurationStatus(str):
    ENABLED = "ENABLED"
    CREATION_IN_PROGRESS = "CREATION_IN_PROGRESS"
    CREATION_FAILED = "CREATION_FAILED"


class PrincipalType(str):
    USER = "USER"
    GROUP = "GROUP"


class ProvisionTargetType(str):
    AWS_ACCOUNT = "AWS_ACCOUNT"
    ALL_PROVISIONED_ACCOUNTS = "ALL_PROVISIONED_ACCOUNTS"


class ProvisioningStatus(str):
    LATEST_PERMISSION_SET_PROVISIONED = "LATEST_PERMISSION_SET_PROVISIONED"
    LATEST_PERMISSION_SET_NOT_PROVISIONED = "LATEST_PERMISSION_SET_NOT_PROVISIONED"


class StatusValues(str):
    IN_PROGRESS = "IN_PROGRESS"
    FAILED = "FAILED"
    SUCCEEDED = "SUCCEEDED"


class TargetType(str):
    AWS_ACCOUNT = "AWS_ACCOUNT"


class AccessDeniedException(ServiceException):
    code: str = "AccessDeniedException"
    sender_fault: bool = False
    status_code: int = 400


class ConflictException(ServiceException):
    code: str = "ConflictException"
    sender_fault: bool = False
    status_code: int = 400


class InternalServerException(ServiceException):
    code: str = "InternalServerException"
    sender_fault: bool = False
    status_code: int = 400


class ResourceNotFoundException(ServiceException):
    code: str = "ResourceNotFoundException"
    sender_fault: bool = False
    status_code: int = 400


class ServiceQuotaExceededException(ServiceException):
    code: str = "ServiceQuotaExceededException"
    sender_fault: bool = False
    status_code: int = 400


class ThrottlingException(ServiceException):
    code: str = "ThrottlingException"
    sender_fault: bool = False
    status_code: int = 400


class ValidationException(ServiceException):
    code: str = "ValidationException"
    sender_fault: bool = False
    status_code: int = 400


AccessControlAttributeValueSourceList = List[AccessControlAttributeValueSource]


class AccessControlAttributeValue(TypedDict, total=False):
    Source: AccessControlAttributeValueSourceList


class AccessControlAttribute(TypedDict, total=False):
    Key: AccessControlAttributeKey
    Value: AccessControlAttributeValue


AccessControlAttributeList = List[AccessControlAttribute]


class AccountAssignment(TypedDict, total=False):
    AccountId: Optional[AccountId]
    PermissionSetArn: Optional[PermissionSetArn]
    PrincipalType: Optional[PrincipalType]
    PrincipalId: Optional[PrincipalId]


AccountAssignmentList = List[AccountAssignment]
Date = datetime


class AccountAssignmentOperationStatus(TypedDict, total=False):
    Status: Optional[StatusValues]
    RequestId: Optional[UUId]
    FailureReason: Optional[Reason]
    TargetId: Optional[TargetId]
    TargetType: Optional[TargetType]
    PermissionSetArn: Optional[PermissionSetArn]
    PrincipalType: Optional[PrincipalType]
    PrincipalId: Optional[PrincipalId]
    CreatedDate: Optional[Date]


class AccountAssignmentOperationStatusMetadata(TypedDict, total=False):
    Status: Optional[StatusValues]
    RequestId: Optional[UUId]
    CreatedDate: Optional[Date]


AccountAssignmentOperationStatusList = List[AccountAssignmentOperationStatusMetadata]
AccountList = List[AccountId]


class CustomerManagedPolicyReference(TypedDict, total=False):
    Name: ManagedPolicyName
    Path: Optional[ManagedPolicyPath]


class AttachCustomerManagedPolicyReferenceToPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    CustomerManagedPolicyReference: CustomerManagedPolicyReference


class AttachCustomerManagedPolicyReferenceToPermissionSetResponse(TypedDict, total=False):
    pass


class AttachManagedPolicyToPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    ManagedPolicyArn: ManagedPolicyArn


class AttachManagedPolicyToPermissionSetResponse(TypedDict, total=False):
    pass


class AttachedManagedPolicy(TypedDict, total=False):
    Name: Optional[Name]
    Arn: Optional[ManagedPolicyArn]


AttachedManagedPolicyList = List[AttachedManagedPolicy]


class CreateAccountAssignmentRequest(ServiceRequest):
    InstanceArn: InstanceArn
    TargetId: TargetId
    TargetType: TargetType
    PermissionSetArn: PermissionSetArn
    PrincipalType: PrincipalType
    PrincipalId: PrincipalId


class CreateAccountAssignmentResponse(TypedDict, total=False):
    AccountAssignmentCreationStatus: Optional[AccountAssignmentOperationStatus]


class InstanceAccessControlAttributeConfiguration(TypedDict, total=False):
    AccessControlAttributes: AccessControlAttributeList


class CreateInstanceAccessControlAttributeConfigurationRequest(ServiceRequest):
    InstanceArn: InstanceArn
    InstanceAccessControlAttributeConfiguration: InstanceAccessControlAttributeConfiguration


class CreateInstanceAccessControlAttributeConfigurationResponse(TypedDict, total=False):
    pass


class Tag(TypedDict, total=False):
    Key: TagKey
    Value: TagValue


TagList = List[Tag]


class CreatePermissionSetRequest(ServiceRequest):
    Name: PermissionSetName
    Description: Optional[PermissionSetDescription]
    InstanceArn: InstanceArn
    SessionDuration: Optional[Duration]
    RelayState: Optional[RelayState]
    Tags: Optional[TagList]


class PermissionSet(TypedDict, total=False):
    Name: Optional[PermissionSetName]
    PermissionSetArn: Optional[PermissionSetArn]
    Description: Optional[PermissionSetDescription]
    CreatedDate: Optional[Date]
    SessionDuration: Optional[Duration]
    RelayState: Optional[RelayState]


class CreatePermissionSetResponse(TypedDict, total=False):
    PermissionSet: Optional[PermissionSet]


CustomerManagedPolicyReferenceList = List[CustomerManagedPolicyReference]


class DeleteAccountAssignmentRequest(ServiceRequest):
    InstanceArn: InstanceArn
    TargetId: TargetId
    TargetType: TargetType
    PermissionSetArn: PermissionSetArn
    PrincipalType: PrincipalType
    PrincipalId: PrincipalId


class DeleteAccountAssignmentResponse(TypedDict, total=False):
    AccountAssignmentDeletionStatus: Optional[AccountAssignmentOperationStatus]


class DeleteInlinePolicyFromPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn


class DeleteInlinePolicyFromPermissionSetResponse(TypedDict, total=False):
    pass


class DeleteInstanceAccessControlAttributeConfigurationRequest(ServiceRequest):
    InstanceArn: InstanceArn


class DeleteInstanceAccessControlAttributeConfigurationResponse(TypedDict, total=False):
    pass


class DeletePermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn


class DeletePermissionSetResponse(TypedDict, total=False):
    pass


class DeletePermissionsBoundaryFromPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn


class DeletePermissionsBoundaryFromPermissionSetResponse(TypedDict, total=False):
    pass


class DescribeAccountAssignmentCreationStatusRequest(ServiceRequest):
    InstanceArn: InstanceArn
    AccountAssignmentCreationRequestId: UUId


class DescribeAccountAssignmentCreationStatusResponse(TypedDict, total=False):
    AccountAssignmentCreationStatus: Optional[AccountAssignmentOperationStatus]


class DescribeAccountAssignmentDeletionStatusRequest(ServiceRequest):
    InstanceArn: InstanceArn
    AccountAssignmentDeletionRequestId: UUId


class DescribeAccountAssignmentDeletionStatusResponse(TypedDict, total=False):
    AccountAssignmentDeletionStatus: Optional[AccountAssignmentOperationStatus]


class DescribeInstanceAccessControlAttributeConfigurationRequest(ServiceRequest):
    InstanceArn: InstanceArn


class DescribeInstanceAccessControlAttributeConfigurationResponse(TypedDict, total=False):
    Status: Optional[InstanceAccessControlAttributeConfigurationStatus]
    StatusReason: Optional[InstanceAccessControlAttributeConfigurationStatusReason]
    InstanceAccessControlAttributeConfiguration: Optional[
        InstanceAccessControlAttributeConfiguration
    ]


class DescribePermissionSetProvisioningStatusRequest(ServiceRequest):
    InstanceArn: InstanceArn
    ProvisionPermissionSetRequestId: UUId


class PermissionSetProvisioningStatus(TypedDict, total=False):
    Status: Optional[StatusValues]
    RequestId: Optional[UUId]
    AccountId: Optional[AccountId]
    PermissionSetArn: Optional[PermissionSetArn]
    FailureReason: Optional[Reason]
    CreatedDate: Optional[Date]


class DescribePermissionSetProvisioningStatusResponse(TypedDict, total=False):
    PermissionSetProvisioningStatus: Optional[PermissionSetProvisioningStatus]


class DescribePermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn


class DescribePermissionSetResponse(TypedDict, total=False):
    PermissionSet: Optional[PermissionSet]


class DetachCustomerManagedPolicyReferenceFromPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    CustomerManagedPolicyReference: CustomerManagedPolicyReference


class DetachCustomerManagedPolicyReferenceFromPermissionSetResponse(TypedDict, total=False):
    pass


class DetachManagedPolicyFromPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    ManagedPolicyArn: ManagedPolicyArn


class DetachManagedPolicyFromPermissionSetResponse(TypedDict, total=False):
    pass


class GetInlinePolicyForPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn


class GetInlinePolicyForPermissionSetResponse(TypedDict, total=False):
    InlinePolicy: Optional[PermissionSetPolicyDocument]


class GetPermissionsBoundaryForPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn


class PermissionsBoundary(TypedDict, total=False):
    CustomerManagedPolicyReference: Optional[CustomerManagedPolicyReference]
    ManagedPolicyArn: Optional[ManagedPolicyArn]


class GetPermissionsBoundaryForPermissionSetResponse(TypedDict, total=False):
    PermissionsBoundary: Optional[PermissionsBoundary]


class InstanceMetadata(TypedDict, total=False):
    InstanceArn: Optional[InstanceArn]
    IdentityStoreId: Optional[Id]


InstanceList = List[InstanceMetadata]


class OperationStatusFilter(TypedDict, total=False):
    Status: Optional[StatusValues]


class ListAccountAssignmentCreationStatusRequest(ServiceRequest):
    InstanceArn: InstanceArn
    MaxResults: Optional[MaxResults]
    NextToken: Optional[Token]
    Filter: Optional[OperationStatusFilter]


class ListAccountAssignmentCreationStatusResponse(TypedDict, total=False):
    AccountAssignmentsCreationStatus: Optional[AccountAssignmentOperationStatusList]
    NextToken: Optional[Token]


class ListAccountAssignmentDeletionStatusRequest(ServiceRequest):
    InstanceArn: InstanceArn
    MaxResults: Optional[MaxResults]
    NextToken: Optional[Token]
    Filter: Optional[OperationStatusFilter]


class ListAccountAssignmentDeletionStatusResponse(TypedDict, total=False):
    AccountAssignmentsDeletionStatus: Optional[AccountAssignmentOperationStatusList]
    NextToken: Optional[Token]


class ListAccountAssignmentsRequest(ServiceRequest):
    InstanceArn: InstanceArn
    AccountId: TargetId
    PermissionSetArn: PermissionSetArn
    MaxResults: Optional[MaxResults]
    NextToken: Optional[Token]


class ListAccountAssignmentsResponse(TypedDict, total=False):
    AccountAssignments: Optional[AccountAssignmentList]
    NextToken: Optional[Token]


class ListAccountsForProvisionedPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    ProvisioningStatus: Optional[ProvisioningStatus]
    MaxResults: Optional[MaxResults]
    NextToken: Optional[Token]


class ListAccountsForProvisionedPermissionSetResponse(TypedDict, total=False):
    AccountIds: Optional[AccountList]
    NextToken: Optional[Token]


class ListCustomerManagedPolicyReferencesInPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    MaxResults: Optional[MaxResults]
    NextToken: Optional[Token]


class ListCustomerManagedPolicyReferencesInPermissionSetResponse(TypedDict, total=False):
    CustomerManagedPolicyReferences: Optional[CustomerManagedPolicyReferenceList]
    NextToken: Optional[Token]


class ListInstancesRequest(ServiceRequest):
    MaxResults: Optional[MaxResults]
    NextToken: Optional[Token]


class ListInstancesResponse(TypedDict, total=False):
    Instances: Optional[InstanceList]
    NextToken: Optional[Token]


class ListManagedPoliciesInPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    MaxResults: Optional[MaxResults]
    NextToken: Optional[Token]


class ListManagedPoliciesInPermissionSetResponse(TypedDict, total=False):
    AttachedManagedPolicies: Optional[AttachedManagedPolicyList]
    NextToken: Optional[Token]


class ListPermissionSetProvisioningStatusRequest(ServiceRequest):
    InstanceArn: InstanceArn
    MaxResults: Optional[MaxResults]
    NextToken: Optional[Token]
    Filter: Optional[OperationStatusFilter]


class PermissionSetProvisioningStatusMetadata(TypedDict, total=False):
    Status: Optional[StatusValues]
    RequestId: Optional[UUId]
    CreatedDate: Optional[Date]


PermissionSetProvisioningStatusList = List[PermissionSetProvisioningStatusMetadata]


class ListPermissionSetProvisioningStatusResponse(TypedDict, total=False):
    PermissionSetsProvisioningStatus: Optional[PermissionSetProvisioningStatusList]
    NextToken: Optional[Token]


class ListPermissionSetsProvisionedToAccountRequest(ServiceRequest):
    InstanceArn: InstanceArn
    AccountId: AccountId
    ProvisioningStatus: Optional[ProvisioningStatus]
    MaxResults: Optional[MaxResults]
    NextToken: Optional[Token]


PermissionSetList = List[PermissionSetArn]


class ListPermissionSetsProvisionedToAccountResponse(TypedDict, total=False):
    NextToken: Optional[Token]
    PermissionSets: Optional[PermissionSetList]


class ListPermissionSetsRequest(ServiceRequest):
    InstanceArn: InstanceArn
    NextToken: Optional[Token]
    MaxResults: Optional[MaxResults]


class ListPermissionSetsResponse(TypedDict, total=False):
    PermissionSets: Optional[PermissionSetList]
    NextToken: Optional[Token]


class ListTagsForResourceRequest(ServiceRequest):
    InstanceArn: InstanceArn
    ResourceArn: TaggableResourceArn
    NextToken: Optional[Token]


class ListTagsForResourceResponse(TypedDict, total=False):
    Tags: Optional[TagList]
    NextToken: Optional[Token]


class ProvisionPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    TargetId: Optional[TargetId]
    TargetType: ProvisionTargetType


class ProvisionPermissionSetResponse(TypedDict, total=False):
    PermissionSetProvisioningStatus: Optional[PermissionSetProvisioningStatus]


class PutInlinePolicyToPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    InlinePolicy: PermissionSetPolicyDocument


class PutInlinePolicyToPermissionSetResponse(TypedDict, total=False):
    pass


class PutPermissionsBoundaryToPermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    PermissionsBoundary: PermissionsBoundary


class PutPermissionsBoundaryToPermissionSetResponse(TypedDict, total=False):
    pass


TagKeyList = List[TagKey]


class TagResourceRequest(ServiceRequest):
    InstanceArn: InstanceArn
    ResourceArn: TaggableResourceArn
    Tags: TagList


class TagResourceResponse(TypedDict, total=False):
    pass


class UntagResourceRequest(ServiceRequest):
    InstanceArn: InstanceArn
    ResourceArn: TaggableResourceArn
    TagKeys: TagKeyList


class UntagResourceResponse(TypedDict, total=False):
    pass


class UpdateInstanceAccessControlAttributeConfigurationRequest(ServiceRequest):
    InstanceArn: InstanceArn
    InstanceAccessControlAttributeConfiguration: InstanceAccessControlAttributeConfiguration


class UpdateInstanceAccessControlAttributeConfigurationResponse(TypedDict, total=False):
    pass


class UpdatePermissionSetRequest(ServiceRequest):
    InstanceArn: InstanceArn
    PermissionSetArn: PermissionSetArn
    Description: Optional[PermissionSetDescription]
    SessionDuration: Optional[Duration]
    RelayState: Optional[RelayState]


class UpdatePermissionSetResponse(TypedDict, total=False):
    pass


class SsoAdminApi:

    service = "sso-admin"
    version = "2020-07-20"

    @handler("AttachCustomerManagedPolicyReferenceToPermissionSet")
    def attach_customer_managed_policy_reference_to_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        customer_managed_policy_reference: CustomerManagedPolicyReference,
    ) -> AttachCustomerManagedPolicyReferenceToPermissionSetResponse:
        raise NotImplementedError

    @handler("AttachManagedPolicyToPermissionSet")
    def attach_managed_policy_to_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        managed_policy_arn: ManagedPolicyArn,
    ) -> AttachManagedPolicyToPermissionSetResponse:
        raise NotImplementedError

    @handler("CreateAccountAssignment")
    def create_account_assignment(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        target_id: TargetId,
        target_type: TargetType,
        permission_set_arn: PermissionSetArn,
        principal_type: PrincipalType,
        principal_id: PrincipalId,
    ) -> CreateAccountAssignmentResponse:
        raise NotImplementedError

    @handler("CreateInstanceAccessControlAttributeConfiguration")
    def create_instance_access_control_attribute_configuration(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        instance_access_control_attribute_configuration: InstanceAccessControlAttributeConfiguration,
    ) -> CreateInstanceAccessControlAttributeConfigurationResponse:
        raise NotImplementedError

    @handler("CreatePermissionSet")
    def create_permission_set(
        self,
        context: RequestContext,
        name: PermissionSetName,
        instance_arn: InstanceArn,
        description: PermissionSetDescription = None,
        session_duration: Duration = None,
        relay_state: RelayState = None,
        tags: TagList = None,
    ) -> CreatePermissionSetResponse:
        raise NotImplementedError

    @handler("DeleteAccountAssignment")
    def delete_account_assignment(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        target_id: TargetId,
        target_type: TargetType,
        permission_set_arn: PermissionSetArn,
        principal_type: PrincipalType,
        principal_id: PrincipalId,
    ) -> DeleteAccountAssignmentResponse:
        raise NotImplementedError

    @handler("DeleteInlinePolicyFromPermissionSet")
    def delete_inline_policy_from_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
    ) -> DeleteInlinePolicyFromPermissionSetResponse:
        raise NotImplementedError

    @handler("DeleteInstanceAccessControlAttributeConfiguration")
    def delete_instance_access_control_attribute_configuration(
        self, context: RequestContext, instance_arn: InstanceArn
    ) -> DeleteInstanceAccessControlAttributeConfigurationResponse:
        raise NotImplementedError

    @handler("DeletePermissionSet")
    def delete_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
    ) -> DeletePermissionSetResponse:
        raise NotImplementedError

    @handler("DeletePermissionsBoundaryFromPermissionSet")
    def delete_permissions_boundary_from_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
    ) -> DeletePermissionsBoundaryFromPermissionSetResponse:
        raise NotImplementedError

    @handler("DescribeAccountAssignmentCreationStatus")
    def describe_account_assignment_creation_status(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        account_assignment_creation_request_id: UUId,
    ) -> DescribeAccountAssignmentCreationStatusResponse:
        raise NotImplementedError

    @handler("DescribeAccountAssignmentDeletionStatus")
    def describe_account_assignment_deletion_status(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        account_assignment_deletion_request_id: UUId,
    ) -> DescribeAccountAssignmentDeletionStatusResponse:
        raise NotImplementedError

    @handler("DescribeInstanceAccessControlAttributeConfiguration")
    def describe_instance_access_control_attribute_configuration(
        self, context: RequestContext, instance_arn: InstanceArn
    ) -> DescribeInstanceAccessControlAttributeConfigurationResponse:
        raise NotImplementedError

    @handler("DescribePermissionSet")
    def describe_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
    ) -> DescribePermissionSetResponse:
        raise NotImplementedError

    @handler("DescribePermissionSetProvisioningStatus")
    def describe_permission_set_provisioning_status(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        provision_permission_set_request_id: UUId,
    ) -> DescribePermissionSetProvisioningStatusResponse:
        raise NotImplementedError

    @handler("DetachCustomerManagedPolicyReferenceFromPermissionSet")
    def detach_customer_managed_policy_reference_from_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        customer_managed_policy_reference: CustomerManagedPolicyReference,
    ) -> DetachCustomerManagedPolicyReferenceFromPermissionSetResponse:
        raise NotImplementedError

    @handler("DetachManagedPolicyFromPermissionSet")
    def detach_managed_policy_from_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        managed_policy_arn: ManagedPolicyArn,
    ) -> DetachManagedPolicyFromPermissionSetResponse:
        raise NotImplementedError

    @handler("GetInlinePolicyForPermissionSet")
    def get_inline_policy_for_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
    ) -> GetInlinePolicyForPermissionSetResponse:
        raise NotImplementedError

    @handler("GetPermissionsBoundaryForPermissionSet")
    def get_permissions_boundary_for_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
    ) -> GetPermissionsBoundaryForPermissionSetResponse:
        raise NotImplementedError

    @handler("ListAccountAssignmentCreationStatus")
    def list_account_assignment_creation_status(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        max_results: MaxResults = None,
        next_token: Token = None,
        filter: OperationStatusFilter = None,
    ) -> ListAccountAssignmentCreationStatusResponse:
        raise NotImplementedError

    @handler("ListAccountAssignmentDeletionStatus")
    def list_account_assignment_deletion_status(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        max_results: MaxResults = None,
        next_token: Token = None,
        filter: OperationStatusFilter = None,
    ) -> ListAccountAssignmentDeletionStatusResponse:
        raise NotImplementedError

    @handler("ListAccountAssignments")
    def list_account_assignments(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        account_id: TargetId,
        permission_set_arn: PermissionSetArn,
        max_results: MaxResults = None,
        next_token: Token = None,
    ) -> ListAccountAssignmentsResponse:
        raise NotImplementedError

    @handler("ListAccountsForProvisionedPermissionSet")
    def list_accounts_for_provisioned_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        provisioning_status: ProvisioningStatus = None,
        max_results: MaxResults = None,
        next_token: Token = None,
    ) -> ListAccountsForProvisionedPermissionSetResponse:
        raise NotImplementedError

    @handler("ListCustomerManagedPolicyReferencesInPermissionSet")
    def list_customer_managed_policy_references_in_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        max_results: MaxResults = None,
        next_token: Token = None,
    ) -> ListCustomerManagedPolicyReferencesInPermissionSetResponse:
        raise NotImplementedError

    @handler("ListInstances")
    def list_instances(
        self, context: RequestContext, max_results: MaxResults = None, next_token: Token = None
    ) -> ListInstancesResponse:
        raise NotImplementedError

    @handler("ListManagedPoliciesInPermissionSet")
    def list_managed_policies_in_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        max_results: MaxResults = None,
        next_token: Token = None,
    ) -> ListManagedPoliciesInPermissionSetResponse:
        raise NotImplementedError

    @handler("ListPermissionSetProvisioningStatus")
    def list_permission_set_provisioning_status(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        max_results: MaxResults = None,
        next_token: Token = None,
        filter: OperationStatusFilter = None,
    ) -> ListPermissionSetProvisioningStatusResponse:
        raise NotImplementedError

    @handler("ListPermissionSets")
    def list_permission_sets(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        next_token: Token = None,
        max_results: MaxResults = None,
    ) -> ListPermissionSetsResponse:
        raise NotImplementedError

    @handler("ListPermissionSetsProvisionedToAccount")
    def list_permission_sets_provisioned_to_account(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        account_id: AccountId,
        provisioning_status: ProvisioningStatus = None,
        max_results: MaxResults = None,
        next_token: Token = None,
    ) -> ListPermissionSetsProvisionedToAccountResponse:
        raise NotImplementedError

    @handler("ListTagsForResource")
    def list_tags_for_resource(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        resource_arn: TaggableResourceArn,
        next_token: Token = None,
    ) -> ListTagsForResourceResponse:
        raise NotImplementedError

    @handler("ProvisionPermissionSet")
    def provision_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        target_type: ProvisionTargetType,
        target_id: TargetId = None,
    ) -> ProvisionPermissionSetResponse:
        raise NotImplementedError

    @handler("PutInlinePolicyToPermissionSet")
    def put_inline_policy_to_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        inline_policy: PermissionSetPolicyDocument,
    ) -> PutInlinePolicyToPermissionSetResponse:
        raise NotImplementedError

    @handler("PutPermissionsBoundaryToPermissionSet")
    def put_permissions_boundary_to_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        permissions_boundary: PermissionsBoundary,
    ) -> PutPermissionsBoundaryToPermissionSetResponse:
        raise NotImplementedError

    @handler("TagResource")
    def tag_resource(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        resource_arn: TaggableResourceArn,
        tags: TagList,
    ) -> TagResourceResponse:
        raise NotImplementedError

    @handler("UntagResource")
    def untag_resource(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        resource_arn: TaggableResourceArn,
        tag_keys: TagKeyList,
    ) -> UntagResourceResponse:
        raise NotImplementedError

    @handler("UpdateInstanceAccessControlAttributeConfiguration")
    def update_instance_access_control_attribute_configuration(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        instance_access_control_attribute_configuration: InstanceAccessControlAttributeConfiguration,
    ) -> UpdateInstanceAccessControlAttributeConfigurationResponse:
        raise NotImplementedError

    @handler("UpdatePermissionSet")
    def update_permission_set(
        self,
        context: RequestContext,
        instance_arn: InstanceArn,
        permission_set_arn: PermissionSetArn,
        description: PermissionSetDescription = None,
        session_duration: Duration = None,
        relay_state: RelayState = None,
    ) -> UpdatePermissionSetResponse:
        raise NotImplementedError
